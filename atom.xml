<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://flybiubiu.github.io</id>
    <title>flybiubiu</title>
    <updated>2021-03-29T05:14:05.757Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://flybiubiu.github.io"/>
    <link rel="self" href="https://flybiubiu.github.io/atom.xml"/>
    <subtitle>别想了, 那个人不是你！</subtitle>
    <logo>https://flybiubiu.github.io/images/avatar.png</logo>
    <icon>https://flybiubiu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, flybiubiu</rights>
    <entry>
        <title type="html"><![CDATA[884. Uncommon Words from Two Sentences]]></title>
        <id>https://flybiubiu.github.io/post/wddrarhBZ/</id>
        <link href="https://flybiubiu.github.io/post/wddrarhBZ/">
        </link>
        <updated>2021-03-19T13:16:56.000Z</updated>
        <content type="html"><![CDATA[<p>https://leetcode-cn.com/problems/uncommon-words-from-two-sentences/<br>
https://tianchi.aliyun.com/oj/338592228998370026/357527484118536804<br>
We are given two sentences A and B.  (A sentence is a string of space separated words.  Each word consists only of lowercase letters.)</p>
<p>A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.</p>
<p>Return a list of all uncommon words.</p>
<p>You may return the list in any order.</p>
<p></p>
<p>Example 1:</p>
<p>Input: A = &quot;this apple is sweet&quot;, B = &quot;this apple is sour&quot;<br>
Output: [&quot;sweet&quot;,&quot;sour&quot;]<br>
Example 2:</p>
<p>Input: A = &quot;apple apple&quot;, B = &quot;banana&quot;<br>
Output: [&quot;banana&quot;]</p>
<p>Note:</p>
<p>0 &lt;= A.length &lt;= 200<br>
0 &lt;= B.length &lt;= 200<br>
A and B both contain only spaces and lowercase letters.</p>
<p>unordered_map&lt;string, int&gt; mapp;<br>
A = A + &quot; &quot; + B;<br>
istringstream str(A);<br>
string s;<br>
vector<string> ans;<br>
while(str &gt;&gt; s) ++mapp[s];<br>
for(auto m:mapp)<br>
if(m.second == 1)<br>
ans.push_back(m.first);<br>
return ans;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最佳利用率]]></title>
        <id>https://flybiubiu.github.io/post/ylb68pyVD/</id>
        <link href="https://flybiubiu.github.io/post/ylb68pyVD/">
        </link>
        <updated>2021-03-19T13:15:21.000Z</updated>
        <content type="html"><![CDATA[<p>https://tianchi.aliyun.com/oj/338592228998370026/357527484118536803<br>
描述<br>
给两个排序的数组。 从两个数组中各取取一个数，这两个数之和需要小于或等于k， 需要找到两数之和最大的索引组合。返回一对包含两个列表的索引。如果有多个两数之和相等的索引答案，你应该选择第一个数组索引最小的索引对。在此前提下，你应该选择第二个数组索引最小的索引对。</p>
<p>1）两数的总和&lt;= k</p>
<p>2）总和是最大的</p>
<p>3）两个数组索引都尽量最小</p>
<p>如果你无法找到答案，你应返回一个空列表[]。</p>
<p>You can assume that the numbers in arrays are all positive integer or zero.</p>
<p>示例<br>
示例1</p>
<p>输入:<br>
A = [1, 4, 6, 9], B = [1, 2, 3, 4], K = 9<br>
输出:<br>
[2, 2]</p>
<p>示例2:</p>
<p>输入:<br>
A = [1, 4, 6, 8], B = [1, 2, 3, 5], K = 12<br>
输出:<br>
[2, 3]</p>
<p>class Solution {<br>
public:<br>
/**<br>
* @param A: an integer sorted array<br>
* @param B: an integer sorted array<br>
* @param K: an integer<br>
* @return: return a pair of index<br>
*/<br>
vector<int> optimalUtilization(vector<int> &amp;A, vector<int> &amp;B, int K) {<br>
// write your code here<br>
int la = A.size();<br>
int lb = B.size();<br>
int max = -1;<br>
vector<int> c;<br>
for (int i = 0;i &lt; la;i ++)<br>
{<br>
for(int j = 0;j &lt; lb;j ++)<br>
{<br>
if(A[i] + B[j] &lt;= K &amp;&amp; A[i] + B[j] &gt; max)<br>
{<br>
max = A[i] + B[j];<br>
if(c.size() != 0)<br>
{<br>
c.pop_back();<br>
c.pop_back();<br>
}<br>
c.push_back(i);<br>
c.push_back(j);</p>
<pre><code>            }
        }
    }
    return c;
}
</code></pre>
<p>};</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最小的行程]]></title>
        <id>https://flybiubiu.github.io/post/WDNwXLB9j/</id>
        <link href="https://flybiubiu.github.io/post/WDNwXLB9j/">
        </link>
        <updated>2021-03-18T13:23:47.000Z</updated>
        <content type="html"><![CDATA[<p>https://tianchi.aliyun.com/oj/338592228998370026/357527484118536805<br>
描述<br>
给定一个二维矩阵，找到从上到下的最小路径。只能向左下，下，右下移动</p>
<p>所有的元素都是正整数<br>
矩阵大小<br>
示例<br>
样例 1:</p>
<p>输入:<br>
1 2 3<br>
4 5 6<br>
7 8 9<br>
输出:<br>
12</p>
<p>解释:<br>
最短的路径为:1-&gt;4-&gt;7, 返回12.</p>
<p>样例 2:</p>
<p>输入:<br>
7 1 12 1<br>
2 3 4 2<br>
1 10 2 6<br>
Output:<br>
4</p>
<p>解释:<br>
最短的路径为:1-&gt;2-&gt;1, 返回 4.</p>
<p>class Solution {<br>
public:<br>
/**<br>
* @param matrix:<br>
* @return: Return the smallest path<br>
*/<br>
int smallestPath(vector&lt;vector<int>&gt; &amp;matrix) {<br>
// Write your code here<br>
int m = matrix.size();<br>
int n = matrix[0].size();<br>
vector<int> dp = matrix[0];<br>
for(int i = 1;i &lt; m;i ++)<br>
{<br>
vector<int> temp(n, 0);<br>
int prevmin;<br>
for(int j = 0;j &lt; n;j ++)<br>
{<br>
prevmin = dp[j];<br>
if(j - 1 &gt;= 0)<br>
prevmin = min(prevmin, dp[j - 1]);<br>
if(j + 1 &lt; n)<br>
prevmin = min(prevmin, dp[j + 1]);<br>
temp[j] = matrix[i][j] + prevmin;<br>
}<br>
swap(dp, temp);<br>
}<br>
return *min_element(dp.begin(), dp.end());<br>
}<br>
};</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[878. Nth Magical Number]]></title>
        <id>https://flybiubiu.github.io/post/eiwMVQ5jp/</id>
        <link href="https://flybiubiu.github.io/post/eiwMVQ5jp/">
        </link>
        <updated>2021-03-18T12:41:25.000Z</updated>
        <content type="html"><![CDATA[<p>HARD<br>
https://leetcode-cn.com/problems/nth-magical-number/<br>
https://tianchi.aliyun.com/oj/338592228998370026/357527484118536806<br>
A positive integer is magical if it is divisible by either a or b.</p>
<p>Given the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.</p>
<p>Example 1:</p>
<p>Input: n = 1, a = 2, b = 3<br>
Output: 2<br>
Example 2:</p>
<p>Input: n = 4, a = 2, b = 3<br>
Output: 6<br>
Example 3:</p>
<p>Input: n = 5, a = 2, b = 4<br>
Output: 10<br>
Example 4:</p>
<p>Input: n = 3, a = 6, b = 4<br>
Output: 8</p>
<p>Constraints:</p>
<p>1 &lt;= n &lt;= 109<br>
2 &lt;= a, b &lt;= 4 * 104</p>
<p>class Solution {<br>
public:<br>
int nthMagicalNumber(int n, int a, int b) {<br>
int MOD = 1e9 + 7;<br>
int L = a * b / gcd(a, b);<br>
long long lo = 0;<br>
long long hi = (long) 1e15;<br>
while(lo &lt; hi)<br>
{<br>
long long mi = lo + (hi - lo) / 2;<br>
if (mi / a  + mi / b - mi / L &lt; n)<br>
lo = mi + 1;<br>
else<br>
hi = mi;<br>
}<br>
return (int)(lo % MOD);<br>
}<br>
};</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[video SR]]></title>
        <id>https://flybiubiu.github.io/post/rBi6GqIQI/</id>
        <link href="https://flybiubiu.github.io/post/rBi6GqIQI/">
        </link>
        <updated>2021-03-18T12:25:44.000Z</updated>
        <content type="html"><![CDATA[<p>*1.TDAN: Temporally-Deformable Alignment Network for Video Super-Resolution(做不了)<br>
pytorch-0.3.1<br>
an NVIDIA 1080TI GPU<br>
github:https://github.com/YapengTian/TDAN-VSR-CVPR-2020<br>
ps:<br>
由于pytorch-0.3.1 做不了<br>
*2.Zooming Slow-Mo: Fast and Accurate One-Stage Space-Time Video Super-Resolution.(尝试失败, 3090不支持pytorch1.4,导致里面的DCNv2版本没法编译)<br>
PyTorch &gt;= 1.1<br>
(一张Nvidia Titan XP GPU.)<br>
github:https://github.com/Mukosame/Zooming-Slow-Mo-CVPR-2020<br>
ps:<br>
由于之前接触过一点点这个项目, 里面有一个可变形模块DCNv2。当时这个模块需要pytorch-1.4<br>
借用的是https://github.com/CharlesShang/DCNv2<br>
后来有人改进了这个模块可以在3090上编译https://github.com/MatthewHowe/DCNv2(失败)<br>
*3.Video Super-resolution with Temporal Group Attention (TGA)(不能)(先看论文)<br>
PyTorch 1.1<br>
(8 Nvidia Tesla V100 GPUs)<br>
github:https://github.com/junpan19/VSR_TGA<br>
ps:<br>
8块v100，不知道一块3090会跑几天<br>
RuntimeError: CUDA out of memory. Tried to allocate 648.00 MiB (GPU 0; 23.70 GiB total capacity; 21.72 GiB already allocated; 169.25 MiB free; 22.17 GiB reserved in total by PyTorch)<br>
*4.Space-Time-Aware Multi-Resolution Video Enhancement(显存不够)(数据集特别大)<br>
PyTorch &gt;= 1.0.0<br>
NVIDIA Tesla V100 GPUs(具体不知道几块v100)<br>
github:https://github.com/alterzero/STARnet<br>
RuntimeError: CUDA out of memory. Tried to allocate 280.00 MiB (GPU 0; 23.70 GiB total capacity; 21.96 GiB already allocated; 113.25 MiB free; 22.23 GiB reserved in total by PyTorch)<br>
*5.FISR: Deep Joint Frame Interpolation and Super-Resolution with A Multi-scale Temporal Loss（做不了）<br>
Tensorflow 1.13<br>
NVIDIA TITAN Xp GPU<br>
github:https://github.com/JihyongOh/FISR<br>
*6.Video Face Super-Resolution with Motion-Adaptive Feedback Cell(不能做, 没代码)<br>
one Titan X Pascal GPU.<br>
*7.JSI-GAN: GAN-Based Joint Super-Resolution and Inverse Tone-Mapping with Pixel-Wise Task-Specific Filters for UHD HDR Video(没代码)<br>
Tensorflow 1.13<br>
*8.VESR-Net: The Winning Solution to Youku Video Enhancement and Super-Resolution Challenge(无代码)<br>
9.STVUN: Deep Space-Time Video Upsampling Networks(貌似比FISR好)(可以试试)(没有train代码,只有test)<br>
Pytorch=1.2<br>
Nvidia Geforce Titan X<br>
github:https://github.com/JaeYeonKang/STVUN-Pytorch<br>
10.MuCAN: Multi-Correspondence Aggregation Network for Video Super-Resolution(没train代码，只有test)<br>
eight NVIDIA GeForce GTX 1080TiGPUs<br>
github:https://github.com/Jia-Research-Lab/Simple-SR<br>
11.Video Super-Resolution with Recurrent Structure-Detail Network (RSDN)(暂无train带代码)<br>
pytorch 1.1<br>
8 Nvidia Tesla V100 GPUs for training.<br>
github:https://github.com/junpan19/RSDN<br>
12.Neural Supersampling for Real-time Rendering(还未完工)<br>
github:https://github.com/IMAC-projects/NSRR-PyTorch<br>
13.Video Restoration with Enhanced Deformable Convolutional Networks(正在尝试)<br>
8 NVIDIA Titan Xp GPUs<br>
github:https://github.com/xinntao/EDVR</p>
]]></content>
    </entry>
</feed>